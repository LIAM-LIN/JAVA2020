Once the data has been read in from the filesystem, you will need to store this in memory.
You will need to devise a suitable set of classes to represent this data inside your Java program.
Think carefully about the tabular nature of relational databases and then write a set of classes
that match this structure. You will need to consider a whole range of different elements of the
database, including: tables, rows, columns, keys, table names, column names, data values, ids
and relationships between entities.

Remember that this unit is about "programming" (not just "coding") and as such we are attempting
to develop your analysis and design skills. This exercise is more than just implementing a
pre-defined specification - it requires you to understand the domain, be able to deconstruct
the problem and make informed design decisions to achieve a successful solution. As such,
it is not easy - you are likely to make mistakes and will need to refactor your code at different
stages of this assignment.

Once you have written a collection of classes that you feel are appropriate to the problem,
use the file reading methods that you wrote in the previous section to load in data from a
set of sample data files and populate instances of your classes. At this stage you will need
to create your own sample data files, including multiple tables and relationships between those tables.

Once you have successfully stored the imported data in your classes, the next step is to write a
method to save these structures _back out_ to the filesystem again
(using appropriate features of the Java File API).

In order to fully test your program, you should alter the data _whilst it is in memory_
(i.e. before you write it back out to the file again). By changing the data, you can check to 
make sure that the file system files are actually being over-written and updated !